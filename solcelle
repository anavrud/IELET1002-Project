// Bibliotek for WiFi
#include <WiFi.h>
#include <WebServer.h>

// Biblotek for server
#include <PubSubClient.h>

// Bibliotek for display:
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Bibliotek for OLED display
#define OLED_RESET 4 
Adafruit_SSD1306 display(OLED_RESET);

// Solcelle 
#define solarCell 36 // ESP32 pin GIOP36 (ADC0)
int   brightness;
float voltage;

// SSID & Password - telefon
const char* ssid = "Altibox257862";  // Enter your SSID here
const char* password = "6h5yV6TU";   // Enter your Password here

// Server login
// bytt ut alle brukernavn og passord med deres egne.
const char* mqttServer = "192.168.10.160";
const int   mqttPort = 1883;
const char* mqttUser = "mqtt_user";
const char* mqttPassword = "#mqtt1213";

WiFiClient esp3Client;
PubSubClient client(esp3Client);

// Setup og konfigurering
void setup() 
{
  Serial.begin(115200);                   // Starter seriekommunikasjon
  Serial.println("Try Connecting to ");
  Serial.println(ssid);                   //Internettnavn
  WiFi.begin(ssid, password);             //Kobler til wi-fi modem

  // Sjekk wi-fi tilkoblet til wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");                     
  Serial.println("WiFi connected successfully");
  Serial.print("Got IP: ");               
  Serial.println(WiFi.localIP());         // Vis ESP32 IP i serial
  delay(3000);                            // Delay som gir oss tid til å kopiere IP - kan slettes

  // Skru på OLED skjerm
  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  // Server tilkobling
  client.setCallback(callback);           // Setter opp "lytting fra Pi"
  WiFi.mode(WIFI_STA);                    
  client.setServer(mqttServer, mqttPort);

  // Sjekk server er tilkoblet
  while(!client.connected())  {
    Serial.println("Connecting to MQTT...");

    if(client.connect("ESP32Client_Solarcell", mqttUser, mqttPassword)) {     // Hvis server er koblet
      Serial.println("Connected");   
    }

    else  {                                           // Hvis server ikke er koblet
      //  Får beskjed om at den ikke er tilkoblet
      Serial.print("Failed with state ");                    
      Serial.print(client.state());
      delay(2000);
    }
  }
  client.subscribe("homeassistant/Pie/Solcelle");     // Definerer topic vi subscriber på
}

// Funksjonen for å trekke volt fra solcella og tjene penger fra overskudd
void solarPanelReading() 
{
  brightness = analogRead(solarCell);         // Leser inngangen på photoresistor(verdi mellom 0 og 4095)
  voltage = brightness * (3.3/4095);          // Gjør om lysstyrke til volt 
  // Sender voltageverdien til server     
  char buffer1[64];
  int storage = snprintf(buffer1, sizeof buffer1, "%f", voltage); // Konverteringskode som muligjør sending til MQTT
  client.publish("homeassistant/esp/solarpanel", buffer1);        // Sender solarpanel til server
  delay(2000);
}

// Lokalt display for Voltage
void displayVoltage()
{  
  // Klargør display
  display.clearDisplay();
  // Setter farge
  display.setTextColor(WHITE);
  // Setter skriftstørelsen
  display.setTextSize(1);
  // Setter pekerkoordinater
  display.setCursor(0,0);
  // Printer til serial
  display.print("Voltage: ");
  display.print(voltage);
  display.print(" V");
}


// Funkjson som reagerer på beskjeder fra Raspberry Pi
void callback(char* topic, byte* payload, unsigned int length)
{
  // Debugging for mottak av beskjeder fra Raspberry Pi
  Serial.print("Topic: ");
  Serial.println(topic);
  Serial.print("Payload: ");
  Serial.print((int)payload[0]);
  Serial.println();
  Serial.println("-----------------------");

  // ###Sende over batteriprosenten til OLEDskjermen

}

// Hovedprogram
void loop() 
{
  client.loop();            // Raspberry PI server
  solarPanelReading();      // Funksjon
  displayVoltage();         // Henter informasjon til OLED som skal vise voltageverdi.
  display.display();
}
