// Zumo32u4 Kode
// Denne koden ...
// Start Sektor: .     Slutt Sektor: ..
//    Servobiblioteker.        
#include <Wire.h>                
#include <Zumo32U4.h>             
#include <Zumo32U4Buttons.h>      
#include <Zumo32U4Encoders.h>
//    Slutt Servobiblioteker..      
             
//    Zumos komponenter som blir brukt.     
Zumo32U4Buzzer buzzer;            //Komponent: buzzer
Zumo32U4LineSensors lineSensors;  //Komponent: linjesensorer
Zumo32U4Motors motors;            //Komponent: motorer
Zumo32U4Encoders encoders;        //Komponent: enkodere:
//    Slutt Zumos komponenter..   

//    Definerer Border Konstanter.                              
#define QTR_THRESHOLD     1200    // Definerer kontrasten som border skal reagere på                                  
//    Border Fart: 0 = stopp, 400 = max hastighet                                 
#define reverseSpeed      200     // Reverseringshastighet: 200, 50% av max
#define turnSpeed         200     // Snuhastighet: 200, 50% av max
#define forwardSpeed      200     // Framhastighet: 200, 50% av max
//    Border Tid 
#define reverseDuration   200     // ms
#define turnDuration      300     // ms  
//    Slutt Border Konstanter..                                

//    Linjesensor Konstanter og variabler.
uint16_t maxSpeed = 200;          // Maksimale snuhastigheten til motoren 
int value = 0;                    // Posisjonsverdien til Linjefølgeren
int16_t lastError = 0;            // Error resettes 
//    Slutt Linjesensor Konstanter og variabler..

//    Counts. 
// Counts som brukes for avstand Zumoen kjører
int countsLeft;
int countsRight;
int counts;
//    Counts..                     
                                  
//    Batteri.                        
int batteryPercent = 100;         // Batteriprosent til Zumo
int maxBattery = 100;             // Max batteritilstand
int wearCounter = 0;              // Slitasjon på batteriet
//    Batteri Slutt..                               
                                      
                                  
//    Antall centimeter.    
float cmCount = 0;                // Centimeter kjørt i Map-funksjonen
//    Slutt antall centimeter kjørt..
                                  
int var = 1;                      // Swich Case defualt
                                  
//    Millis som "delayfunksjoner".    
unsigned long previousMillis1 = 0;// Til Millis i funksjon: Linjefølger
unsigned long previousMillis2 = 0;// Til Millis i funksjon: Border
unsigned long previousMillis3 = 0;// Til Millis i funksjon: Ladestasjon
//    Slutt Millis..              
                                
// FUNKSJON: Kalibrerer sensoren.  
void calibrateSensors()
{   
  navigationStation();            // Åpen for kommandoer                         
  lineSensors.initFiveSensors();  // Bruker alle 5 linjesensorene
  // Vent 1 sekund og begynn deretter automatisk sensorkalibrering
  // ved å rotere på plass for å sveipe sensorene over linjen 
  delay(1000);                    // Vent 1 sekund
  for (uint16_t i = 0; i < 120; i++){ //Roterer Zumoen for å sveipe sensorene over linjen
    if (i > 30 && i <= 90){         
      motors.setSpeeds(-200, 200);// Venstrehjul rygger, Høyrehjul kjører framover. Begge med 50% av maxhastighet
    }
    else{
      motors.setSpeeds(200, -200);// Venstrehjul kjører framover, Høyrehjul rygger. Begge med 50% av maxhastighet
    }
    lineSensors.calibrate();      // Kalibrerer Sensorer          
  }
  motors.setSpeeds(0, 0);         // Begge motorer stopper
}                                 
                                  
void setup()                      
{
  Serial1.begin(115200);          // Stiller inn datahastigheten til 115200 baud        
  calibrateSensors();             // Kalibrerer linjesensorer
  delay(2000);                    // Vent 2 Sekund
} 

// Kjører linjefølger
void lineFollower() 
{ 
  navigationStation();                                        // Åpen for kommandoer
  // For hvert 2,5 sekund, skriv batteriprosenten til ESP32
  unsigned long currentMillis1 = millis();                    // Nåværende millis     
  if(currentMillis1 - previousMillis1 >= 2500) {
    previousMillis1 = currentMillis1;                         // Forrige millis settes som Nåværende, slik at den funker som delay
    Serial1.write(batteryPercent);                            // Skriver batteriprosenten til ESP32
  }
  
  #define NUM_SENSORS 5                                       // Definerer de 5 linjesensorene
  unsigned int lineSensorValues[NUM_SENSORS];                 // Alle 5 linjesensorene brukes
  int16_t position = lineSensors.readLine(lineSensorValues);  // Få posisjonen til linjen 
  
  // Vår "error" er hvor langt unna vi er fra sentrum av 
  // linjen, som tilsvarer posisjon 2000 
  int16_t error = position - 2000; 
  // Få motorhastighetsforskjell ved hjelp av proporsjonal og derivert 
  // Her bruker vi en proporsjonal konstant på 1/4 og en derivert konstant på 6, som 
  // fungerer anstendig for mange Zumo motoriske valg 
  int16_t speedDifference = error / 4 + 6 * (error - lastError); 

  // Value settes til å være den nåværende posisjonen,  
  // og oppdateres hele tiden 
  lastError = error; 
  value = error + 2000; 
  
  // Få individuelle motorhastigheter  
  // Tegnet på hastighetsforskjell bestemmer om roboten svinger til venstre eller høyre. 
  int16_t leftSpeed = (int16_t)maxSpeed + speedDifference; 
  int16_t rightSpeed = (int16_t)maxSpeed - speedDifference; 

  // Begrens motorhastighetene våre til å være mellom 0 og maxSpeed. 
  // Den ene motoren vil alltid gå på maxSpeed, og den andre 
  // vil være på maxSpeed-|speedDifference| hvis det er positivt, 
  // eller så blir den stasjonær. 
  leftSpeed = constrain(leftSpeed, 0, (int16_t)maxSpeed); 
  rightSpeed = constrain(rightSpeed, 0, (int16_t)maxSpeed);   
  motors.setSpeeds(leftSpeed, rightSpeed); 

  // Sørger for at Zumoen kjører videre når den får beskjed om at den er fulladet 
  String incoming; 
    // Når batteriprosenten er under 10%, åpnes den for kommunikasjon om ladning fra ESP32
    if (batteryPercent < 10) {
    while (Serial1.available()){
      navigationStation();                                     // Åpen for kommandoer
      // Dersom Zumoen motar en beskjed fra Esp32
      char received2 = (char)Serial1.read();
      incoming = received2;
      // Hvis beskjeden er char x
      if(incoming == "x") {
        cmCount = 0;                                           // Nullstill batteriet
        // Gjør klar Zumoen for linjefølger
        delay(reverseDuration); 
        motors.setSpeeds(40, 60);                              // Kjører zumoen litt fram for å komme seg ut lademodus
        delay(1000);
        var = 1;                                               // Kaller på linjefølger
      }
      // Hvis Zumoen ikke motar en x
      else if (incoming != "x") {
        navigationStation();                                   // Åpen for kommandoer
        goto bailout;                                          // fortsetter linjefølger
      }
    }
  }
  bailout:
  
  // Når batteriprosenten er under 10% leter Zumoen etter de definerte thresholdene(kontrastene) som gjør at zumoen går i lademodus
  if((incoming != "x") && (lineSensorValues[0] < 2) && (lineSensorValues[4] > 600) && (batteryPercent < 10)) {
    navigationStation();                                    // Åpen for kommandoer
    motors.setSpeeds(0, 0);                                 // Stopper motorene
    // Legger til en timer, slik at zumoen ikke sender konstant beskjeder til ESP32
    unsigned long currentMillis3 = millis();                // Nåværende millis
    if(currentMillis3 - previousMillis3 >= 2500) {
      previousMillis3 = currentMillis3;                     // Forrige millis settes som Nåværende, slik at den funker som delay
      Serial1.write(101);                                   // Ber Serveren om å lade Zumoen
    }
  }
}

// Kjører border
void border()
{
  // Åpen for kommandoer
  navigationStation();
  
  // For hvert 2,5 sekund, skriv batteriprosenten til ESP32
  unsigned long currentMillis2 = millis();                // Nåværende millis
    if(currentMillis2 - previousMillis2 >= 2500) {
      previousMillis2 = currentMillis2;                   // Forrige millis settes som Nåværende, slik at den funker som delay
      Serial1.write(batteryPercent);                      // Skriver batteriprosenten til ESP32             
    }
  lineSensors.initThreeSensors();                         // Aktiverer 3 linjesensorer (1,3,5)
  #define NUM_SENSORS 3                                   // Definerer de 3 linjesensorene
  unsigned int lineSensorValues[NUM_SENSORS];             // De 3 linjesensorene brukes
  lineSensors.read(lineSensorValues);                     // Få posisjonen til linjen
  
  if (lineSensorValues[0] > QTR_THRESHOLD)                // Hvis linjesensorverdier leser kontrasten til svart linje
  {
    // Hvis sensoren mest til venstre ser den svarte linjen, rygg og snu 90 grader til høyre og kjør videre
    motors.setSpeeds(-reverseSpeed, -reverseSpeed);
    delay(reverseDuration);
    motors.setSpeeds(turnSpeed, -turnSpeed);
    delay(turnDuration);
    motors.setSpeeds(forwardSpeed, forwardSpeed);
  }
  else if (lineSensorValues[NUM_SENSORS - 1] > QTR_THRESHOLD)
  {
    // Hvis sensoren mest til høyre ser den svarte linjen, rygg og snu 90 grader til venstre og kjør videre
    motors.setSpeeds(-reverseSpeed, -reverseSpeed);
    delay(reverseDuration);
    motors.setSpeeds(-turnSpeed, turnSpeed);
    delay(turnDuration);
    motors.setSpeeds(forwardSpeed, forwardSpeed);
  }
  else
  {
    // Dersom den treffer ingen svart linje, kjører den framover
    motors.setSpeeds(forwardSpeed, forwardSpeed);
  }
  // Hvis batteriprosenten er under 10%
  if (batteryPercent < 10) {
     // Gjør klar Zumoen for linjefølger
    delay(reverseDuration);
    // Kjør zumoen fram til den treffer kontrasten til svart linje
    motors.setSpeeds(60, 60);
    if (lineSensorValues[2] > 650) {
      var = 3;                                    // Når den treffer den svarte linjen kalibrer og gjør klar for linjefølger
    }
  }
}

//  Bruker navigationStation slik at vi kan bevege oss ut av moduser når vi vil
void navigationStation() {
  // Åpner zumoen for å få beskjeder fra ESP32
  String commandIn; 
  while (Serial1.available()){
    // Beskjeden vi får fra ESP32 utføres som en kommando i Zumo
    char received = (char)Serial1.read();
    commandIn = received;
    // Kommandoen for ladning
    if(commandIn == "x") {
      Serial.println("x");
      cmCount = 0;                                // Nullstill batteriet
      wearCounter++;                              // legger til 1 wearCount(batterislitasje)hver gang Zumoen lades
      // Gjør klar Zumoen for linjefølger
      delay(reverseDuration);
      motors.setSpeeds(40, 60);
      delay(1000);
      var = 1;                                    // Setter Zumoen i linjefølger
      // Dersom wearCount(batterislitasje) når 10, minker max batteriet med 3%
      if (wearCounter == 10) {
        maxBattery = maxBattery-3;
        wearCounter = 0;                          // Restarter wearCount
      }
    }
    // Kommandoen for linjefølger
    else if(commandIn == "l") {
      var = 1;                                    // Setter Zumoen i linjefølger
    }
    // Kommandoen for border
    else if(commandIn == "b") {
      motors.setSpeeds(-turnSpeed, turnSpeed);    // Snur Zumoen til vesntre og kjører den fram, slik at den kommer inn i banen
      delay(turnDuration);
      var = 2;                                    // Setter Zumoen i border
    }
    // Kommandoen for kalibrering 
    else if(commandIn == "c") {
      var = 3;                                    // Setter Zumoen i kalibrering
    }
    // Kommandoen for stopp
    else if(commandIn == "s") {                   
      var = 4;                                    // Setter Zumoen i stopp
    }
  }
}

void loop()
{
  navigationStation();                            // Åpen for kommandoer        
  // Teller antall counts
  countsLeft = encoders.getCountsAndResetLeft();
  countsRight = encoders.getCountsAndResetRight();
  // Når Zumo begynner å kjøre, teller den
  do {
    countsLeft = encoders.getCountsLeft();
    countsRight = encoders.getCountsRight();
    counts = ((countsLeft + countsRight)/2);
    
    switch(var){
      case 1:
        lineFollower();                                   // Linjefølger
        navigationStation();                              // Åpen for kommandoer
        break;
      case 2:
        border();                                         // Border
        navigationStation();                              // Åpen for kommandoer
        break;
      case 3:
        calibrateSensors();                               // Kalibrering linjesensor
        navigationStation();                              // Åpen for kommandoer
        var = 1;                                          // Settes til linjefølger
        break;
      case 4:
        // Stopper Zumoen
        delay(reverseDuration);                   
        motors.setSpeeds(0, 0);
        navigationStation();                              // Åpen for kommandoer
        break;
    }   
    
  // Skalert til cm for mer presisjon i telling 
  }  while(counts < 80); 

  cmCount++;                                              // Teller antall cm kjørt
  batteryPercent = map(cmCount, 0, 2000, maxBattery, 0);  // Map for batteriprosent
  navigationStation();                                    // Åpen for kommandoer

}
