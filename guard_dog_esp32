#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>

// SSID & Password - Ruter
const char* ssid = "Altibox257862";  // Enter your SSID here
const char* password = "6h5yV6TU";  //Enter your Password here

const char* mqttServer = "192.168.10.160";
const int mqttPort = 1883;
const char* mqttUser = "mqtt_user";
const char* mqttPassword = "#mqtt1213";


WiFiClient esp2Client;
PubSubClient client(esp2Client);


void setup() {
  WiFi.mode(WIFI_STA);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while(WiFi.status() != WL_CONNECTED)  {
   delay(500);
   Serial.println("Connecting to WiFi..."); 
  }
  Serial.println("WiFi connected.");

  client.setServer(mqttServer, mqttPort);



  client.setCallback(callback);
  while(!client.connected())  {
    Serial.println("Connecting to MQTT...");

    if(client.connect("ESP32Client_Zumo", mqttUser, mqttPassword)) {
      Serial.println("Connected");   
    }

    else  {
      Serial.print("Failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
  client.subscribe("homeassistant/esp/rechargeOut");
  client.subscribe("homeassistant/zumo/mode");
  client.subscribe("homeassistant/zumo/steering");
}






//Funkjson som reagerer på beskjeder fra Raspberry Pi
void callback(char* topic, byte* payload, unsigned int length) {

  //Serial.print("Topic: ");
//  Serial.println(topic);
//  Serial.print("Payload: ");
//  Serial.print((int)payload[0]);

  //Skrur av eller på alarm ved beskjed fra Raspberry Pi
  if ((int)payload[0] == 48) {
   Serial.write("x");
   //Serial.println("X er sendt");
  }
  else if ((int)payload[0] == 49) { // Linjefølger
    Serial.write("l"); 
  }
  else if ((int)payload[0] == 50) { // Boarder
    Serial.write("b");
  }
  else if ((int)payload[0] == 52) { // Kalibrerer
    Serial.write("c");
  }
  else if ((int)payload[0] == 53) { // Manual (RC remote)
    Serial.write("m");
  }
  else if ((int)payload[0] == 51) { // Stopp
    Serial.write("s");
  }
}






void loop() {
  client.loop();
  int batteriProsent;
  int chargingStation;
  int received;
  while(Serial.available()) {
    delay(1);
    received = (int)Serial.read();
    if ((received <= 100) && (received > 0)) {
      batteriProsent = received;
      //Serial.print("ESP32: ");
      //Serial.println(batteriProsent);
      char buffer1[64];
      int batteryReturn = snprintf(buffer1, sizeof buffer1, "%d", batteriProsent);
      client.publish("homeassistant/esp/battery", buffer1);
    }
    else if (received == 101) {
      chargingStation = received;
      char buffer2[64];
      int requestReturn = snprintf(buffer2, sizeof buffer2, "%d", chargingStation);
      client.publish("homeassistant/esp/chargerequest", buffer2);
    }
  }
  if (received == 101){
    client.publish("homeassistant/esp/chargerequest", "Dog at charging station, please charge him");
  }
  
    
//  if (batteriProsent == 96){ //var 10
//    Serial.write("p");
//    client.publish("homeassistant/esp/Zumo", "Low Battery, Request Charging. Cost: 200NOK");
//  }
//  else if (batteriProsent <= 95 && batteriProsent >=90) { //var 5 og 0
//    Serial.write("q");
//    client.publish("homeassistant/esp/Zumo", "Critical Low Battery! Request Charging. Cost: 200NOK");
//  }


  
//    char buffer1[64];
//    int ret = snprintf(buffer1, sizeof buffer1, "%d", 100);
//    client.publish("homeassistant/esp/battery", buffer1);
  
}
